import pygame, sys, random
from pygame.locals import *

def verifSuperposicionRects(rect1, rect2):
    for a, b in [(rect1, rect2), (rect2, rect1)]:

        if ((puntoDentroDeRect(a.left, a.top, b)) or
            (puntoDentroDeRect(a.left, a.bottom, b)) or
            (puntoDentroDeRect(a.right, a.top, b)) or
            (puntoDentroDeRect(a.right, a.bottom, b))):
            return True
    
    return False

def puntoDentroDeRect(x, y, rect):
    if (x > rect.left) and (x < rect.right) and (y > rect.top) and (y < rect.bottom):
        return True
    else:
        return False



pygame.init()
relojPrincipal = pygame.time.Clock()


ANCHOVENTANA = 400
ALTOVENTANA = 400
superficieVentana = pygame.display.set_mode((ANCHOVENTANA, ALTOVENTANA), 0, 32)
pygame.display.set_caption("Deteccion de coliciones")


ABAJOIZQUIERDA = 1
ABAJODERECHA = 3
ARRIBAIZQUIERDA = 7
ARRIBADERECHA = 9

VELOCIDADMOVIMIENTO = 4

NEGRO = (0, 0, 0)
VERDE = (0, 255, 0)
BLANCO = (255, 255, 255)



contadorComida = 0
NUEVACOMIDA = 40
TAMAÑOCOMIDA = 20
rebotin = {"rect":pygame.Rect(300, 100, 50, 50), "dir":ARRIBAIZQUIERDA}
comidas = []
for i in range(20):
    comidas.append(pygame.Rect(random.randint(0, ANCHOVENTANA - TAMAÑOCOMIDA), random.randint(0, ALTOVENTANA - TAMAÑOCOMIDA), TAMAÑOCOMIDA,TAMAÑOCOMIDA))

while True:

    for evento in pygame.event.get():
        if evento.type == QUIT:
            pygame.quit()
            sys.exit()

    contadorComida += 1
    if contadorComida >= NUEVACOMIDA:
        contadorComida = 0
        comidas.append(pygame.Rect(random.randint(0, ANCHOVENTANA - TAMAÑOCOMIDA), random.randint(0, ALTOVENTANA - TAMAÑOCOMIDA), TAMAÑOCOMIDA,TAMAÑOCOMIDA))




    superficieVentana.fill(NEGRO)


    if rebotin["dir"] == ABAJOIZQUIERDA:
        rebotin["rect"].left -= VELOCIDADMOVIMIENTO
        rebotin["rect"].top += VELOCIDADMOVIMIENTO
    if rebotin["dir"] == ABAJODERECHA:
        rebotin["rect"].left += VELOCIDADMOVIMIENTO
        rebotin["rect"].top += VELOCIDADMOVIMIENTO
    if rebotin["dir"] == ARRIBAIZQUIERDA:
        rebotin["rect"].left -= VELOCIDADMOVIMIENTO
        rebotin["rect"].top -= VELOCIDADMOVIMIENTO
    if rebotin["dir"] == ARRIBADERECHA:
        rebotin["rect"].left += VELOCIDADMOVIMIENTO
        rebotin["rect"].top -= VELOCIDADMOVIMIENTO


    if rebotin["rect"].top < 0:

        if rebotin["dir"] == ARRIBAIZQUIERDA:
            rebotin["dir"] = ABAJOIZQUIERDA
        if rebotin["dir"] == ARRIBADERECHA:
            rebotin["dir"] = ABAJODERECHA

    if rebotin["rect"].bottom > ALTOVENTANA:
        if rebotin["dir"] == ABAJOIZQUIERDA:
            rebotin["dir"] = ARRIBAIZQUIERDA
        if rebotin["dir"] == ABAJODERECHA:
            rebotin["dir"] = ARRIBADERECHA
    if rebotin["rect"].left < 0:

        if rebotin["dir"] == ABAJOIZQUIERDA:
            rebotin["dir"] = ABAJODERECHA
        if rebotin["dir"] == ARRIBAIZQUIERDA:
            rebotin["dir"] = ARRIBADERECHA
    if rebotin["rect"].right > ANCHOVENTANA:

        if rebotin["dir"] == ABAJODERECHA:
            rebotin["dir"] = ABAJOIZQUIERDA
        if rebotin["dir"] == ARRIBADERECHA:
            rebotin["dir"] = ARRIBAIZQUIERDA


    pygame.draw.rect(superficieVentana, BLANCO, rebotin["rect"])


    for comidas in comidas[:]:
        if verifSuperposicionRects(rebotin["rect"], comidas):
            comidas.remove(comidas)

    for i in range(len(comidas)):
        pygame.draw.polygon(superficieVentana, VERDE, comidas[i])



    pygame.display.update()
    relojPrincipal.tick(40)

            
    
